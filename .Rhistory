"Demora + de 3 días" = delay_3,
"% delay + de 3 días" = pct_delay_3
)
#Pegar valores
summary_table %>%
mutate(delay = str_glue("{delay_mean} ({delay_sd})")) %>%
select(-c(delay_mean, delay_sd)) %>%
adorn_totals(where="row") %>%
select(
"Nombre de Hospital" = hospital,
"Casos" = casos,
"Demora máxima" = delay_max,
"Media (Sd)" = delay,
"Demora + de 3 días" = delay_3,
"% delay + de 3 días" = pct_delay_3
)
# Percentiles
# obtiene valores de percentil de edad por defecto (0%, 25%, 50%, 75%, 100%)
linelist %>%
summarise(age_percentiles = Quantile(age_years, na.rm = TRUE))
# Percentiles
# obtiene valores de percentil de edad por defecto (0%, 25%, 50%, 75%, 100%)
linelist %>%
summarise(age_percentiles = quantile(age_years, na.rm = TRUE))
age_percentiles
# Percentiles
# obtiene valores de percentil de edad por defecto (0%, 25%, 50%, 75%, 100%)
linelist %>%
summarise(age_percentiles = quantile(age_years, na.rm = TRUE))
# obtiene valores de percentil de edad especificados manualmente (5%, 50%, 75%, 98%)
linelist %>%
summarise(
age_percentiles = quantile(
age_years,
probs = c(.05, 0.5, 0.75, 0.98),
na.rm = TRUE
)
)
)
# obtiene valores de percentil de edad especificados manualmente (5%, 50%, 75%, 98%)
linelist %>%
summarise(
age_percentiles = quantile(
age_years,
probs = c(.05, 0.5, 0.75, 0.98),
na.rm = TRUE)
)
# obtiene valores de percentil de edad especificados manualmente (5%, 50%, 75% 98%)
linelist%>%
group_by(hospital) %>%
summarise(
p05 = quantile(age_years, probs = 0.05, na.rm = T),
p50 = quantile(age_years, probs = 0.5, na.rm = T),
p75 = quantile(age_years, probs = 0.75, na.rm = T),
p98 = quantile(age_years, probs = 0.98, na.rm = T),
)
linelist %>%
rstatix::get_summary_stats(age, type = "quantile")
# Resumir datos agregados
linelist_agg <- linelist %>%
drop_na(gender, outcome) %>%
count(outcome, gender)
linelist_agg
linelist_agg %>%
group_by(outcome) %>%
summarise(
total_cases = sum(n, na.rm = T),
male_cases = sum(n[gender == "m"], na.rm = T),
female_cases = sum(n[gender == "f"], na.rm = T))
# across() varias columnas
linelist %>%
group_by(outcome) %>%
summarise(across(.cols = c(age_years, temp, wt_kg, ht_cm),
.fns = mean,
na.rm=T))
# across() varias columnas
linelist %>%
group_by(outcome) %>%
round(summarise(across(.cols = c(age_years, temp, wt_kg, ht_cm)), digits = 2,
.fns = mean,
na.rm=T))
# across() varias columnas
linelist %>%
group_by(outcome) %>%
round(summarise(across(.cols = c(age_years, temp, wt_kg, ht_cm)), digits = 2),
.fns = mean,
na.rm=T))
# across() varias columnas
linelist %>%
group_by(outcome) %>%
round(summarise(across(.cols = c(age_years, temp, wt_kg, ht_cm)), digits = 2),
.fns = mean,
na.rm=T))
# across() varias columnas
linelist %>%
(group_by(outcome) %>%
summarise(across(.cols = c(age_years, temp, wt_kg, ht_cm),
.fns = mean,
na.rm=T))
# across() varias columnas
linelist %>%
group_by(outcome) %>%
summarise(across(.cols = c(age_years, temp, wt_kg, ht_cm),
.fns = mean,
na.rm=T))
# across() varias columnas
linelist %>%
group_by(outcome) %>%
summarise(round(across(.cols = c(age_years, temp, wt_kg, ht_cm),
.fns = mean,
na.rm=T), digits = 2))
# round(mean(days_onset_hosp, na.rm=TRUE), digits = 2)
View(linelist)
library(pacman)
pacman::p_load(rio, here, skimr, tidyverse, gtsummary,
rstatix, janitor, scales, flextable)
# importar el archivo directamente desde Github
cleaning_dict <- import("https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/cleaning_dict.csv")
head(cleaning_dict)
library(pacman)
pacman::p_load(rio, here, skimr, tidyverse, gtsummary,
rstatix, janitor, scales, flextable)
# importar el archivo directamente desde Github
cleaning_dict <- import("https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/cleaning_dict.csv")
head(cleaning_dict)
library(pacman)
pacman::p_load(rio, here, skimr, tidyverse, gtsummary,
rstatix, janitor, scales, flextable, epirhandbook)
# importar el archivo directamente desde Github
cleaning_dict <- import(
"https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/cleaning_dict.csv"
)
library(viridis)
library(RColorBrewer) #paletas de colores
library(pacman)
pacman::p_load(rio,
here,
skimr,
tidyverse,
gtsummary,
rstatix,
janitor,
scales,
flextable)
linelist <- import("linelist_cleaned.rds")
linelist_cleaned <- readRDS("~/Documentos/intro_r/linelist_cleaned.rds")
linelist <- import("linelist_cleaned.rds")
linelist <- import("linelist_cleaned.rds")
library(pacman)
pacman::p_load(rio, here, skimr, tidyverse, gtsummary,
rstatix, janitor, scales, flextable, epirhandbook)
library(pacman)
pacman::p_load(rio, here, skimr, tidyverse, gtsummary,
rstatix, janitor, scales, flextable, epirhandbook)
# importar el archivo directamente desde Github
cleaning_dict <- import(
"https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/cleaning_dict.csv"
)
library(viridis)
library(RColorBrewer) #paletas de colores
library(pacman)
pacman::p_load(rio,
here,
skimr,
tidyverse,
gtsummary,
rstatix,
janitor,
scales,
flextable)
linelist <- import("linelist_cleaned.rds")
head(cleaning_dict)
head(linelist)
skim(linelist)
#ESTA FUNCION MUESTRA:
#summary
#numero columnas, numero de filas, tipos de columnas y frecuencia
#nombre de la columna, numeros missing, ratio, minimo, maximo, vacio, numeros unicos, espacios en blanco
#
#
summary(linelist)
summary(linelist$age_years)[[2]]
#1st Qu.: 6.00   ESTA ORDEN SELECIONA EL 2 ELEMENTO QUE DEVUELVE LA LISTA DE LA FUNCION SUMMARY
#ALMACENAR LOS DATOS DE SUMMARY EN UN FORMATO DATAFRAME
#get_summary_stats( ) pertenece a la libreria rstatix
linelist %>%
get_summary_stats(
age, wt_kg, ht_cm, ct_blood, temp,
type = "common")
linelist %>%
tabyl(age_cat)
linelist %>%
tabyl(age_cat, gender) %>%
adorn_totals(where = "row") %>%
adorn_percentages(denominator = "row") %>%
adorn_pct_formatting(digits = 2)
linelist %>%
tabyl(age_cat) %>%
adorn_pct_formatting()
library(flextable)
linelist %>%
tabyl(age_cat, gender) %>%
adorn_totals(where = "row") %>%
adorn_percentages(denominator = "row") %>%
adorn_pct_formatting(digits = 1) %>%
flextable()
linelist %>%
count(hospital) %>% #conteo de hospitales
adorn_totals()      #totales
table(cleaning_dict)
linelist %>%
summarise(n_row = n())
linelist %>%
group_by(age_cat) %>%
summarise(n_rows= n())
linelist %>%
count(age_cat)
linelist %>%
count('Categorias de edades' = age_cat, 'Brote' =  outcome, name = "Recuento") #funcion y opciones
age_summary <-  linelist %>%
count("Categorias de edades" = age_cat, name = "recuento") %>%
mutate(percent =scales::percent(recuento / sum(recuento)))
age_summary
age_summary %>%
flextable()
library(ggplot2)
age_summary <- linelist %>%
count(age_cat, outcome) %>%
mutate(percent = scales::percent(n / sum(n)))
ggplot(age_summary, aes(x = outcome, y = n, fill = age_cat)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Distribución de Resultados por Categoría de Edad",
x = "Outcome",
y = "Count",
fill = "AGE_CAT") +
theme_minimal()
ggplot(age_summary, aes(x = outcome, y = n, fill = age_cat)) +
geom_bar(stat = "summary", position = "fill") +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Distribución de Resultados por Categoría de Edad",
x = "Outcome",
y = "Proporcion",
fill = "age_cat") +
theme_minimal()
linelist %>%
count(age_cat, outcome) %>%
ggplot()+
geom_col(
mapping = aes(
x=outcome,
fill = age_cat,
y=n
)
)
unique(linelist$outcome)
ggplot(linelist, aes(x = outcome, fill = gender)) +
geom_bar(position = "fill") +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Distribución de OUTCOME según GENERO",
x = "Género",
y = "Proporción",
fill = "Outcome") +
theme_minimal()
pie_data <- linelist %>%
group_by(outcome, gender) %>%
summarise(n = n()) %>%
ungroup()
ggplot(pie_data, aes(x = "", y = n, fill = gender)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
facet_wrap(~outcome) +
labs(title = "Distribución de Resultados según Género",
x = NULL,
y = NULL,
fill = "Género") +
theme_minimal() +
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5))
summary_table <- linelist %>%
group_by(hospital) %>%
summarise(
casos = n(),
delay_max = max(days_onset_hosp, na.rm = TRUE),
delay_mean = round(mean(days_onset_hosp, na.rm = TRUE), digits = 2),
delay_sd = round(sd(days_onset_hosp, na.rm = TRUE), digits = 2),
delay_3 = sum(days_onset_hosp <= 3, na.rm = TRUE),
pct_delay_3 = percent(delay_3 / casos)
)
summary_table
ggplot(summary_table, aes(x = 2, y = casos, fill = hospital)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
xlim(0.5, 2.5) +
labs(title = "Distribución de Casos por Hospital",
fill = "Hospital") +
theme_void() +
geom_text(aes(label = casos), position = position_stack(vjust = 0.5), color = "white")
ggplot(summary_table, aes(x = 2, y = casos, fill = hospital)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
xlim(0.5, 2.5) +
labs(title = "Distribución de Casos por Hospital",
fill = "Hospital") +
theme_void() +
geom_text(aes(label = casos), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_viridis(discrete = TRUE)
ggplot(summary_table, aes(x = 2, y = casos, fill = hospital)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
xlim(0.5, 2.5) +
labs(title = "Distribución de Casos por Hospital",
fill = "Hospital") +
theme_void() +
geom_text(aes(label = casos), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = brewer.pal(n = 8, name = "Dark2"))
linelist %>%
group_by(hospital) %>%
summarise(
max_temp_fvr = max(temp[fever =="yes"], na.rm =T),
max_temp_NO = max(temp[fever =="no"], na.rm =T)
)
temperature_summary <- linelist %>%
group_by(hospital) %>%
summarise(
max_temp_fvr = max(temp[fever == "yes"], na.rm = TRUE),
max_temp_NO = max(temp[fever == "no"], na.rm = TRUE)
)
# Convertir los datos a formato largo (tidy) para facilitar la visualización
temperature_summary_long <- temperature_summary %>%
pivot_longer(cols = c(max_temp_fvr, max_temp_NO),
names_to = "fever_status",
values_to = "max_temperature")
# Gráfico de barras
ggplot(temperature_summary_long, aes(x = hospital, y = max_temperature, fill = fever_status)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Temperaturas Máximas por Estado de Fiebre y Hospital",
x = "Hospital",
y = "Temperatura Máxima",
fill = "TEMPERATURA") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#glue lo que hace es unir datos.
summary_table %>%
mutate(delay =str_glue("{delay_mean} ({delay_sd})")) %>%
select(-c (delay_mean, delay_sd)) %>%
adorn_totals(where ="row") %>%
select(
"Hospital" =hospital,
"Casos"=casos,
"Demora Maxima" =delay_max,
"Media(sd)" = delay,
"Demora + 3 dias" = delay_3,
"% Demora + 3 dias" =pct_delay_3
)
names(linelist)
unique(linelist$chills)
# Filtrar el dataframe para incluir solo filas donde el síntoma es "sí"
symptoms_freq <- linelist %>%
summarise(across(c(fever, chills, cough, aches, vomit), ~sum(. == "yes", na.rm = TRUE)))
# Convertir a formato largo (tidy)
symptoms_freq_long <- symptoms_freq %>%
pivot_longer(cols = everything(),
names_to = "symptom",
values_to = "frequency")
# Crear el gráfico de barras
ggplot(symptoms_freq_long, aes(x = symptom, y = frequency, fill = symptom)) +
geom_bar(stat = "identity") +
labs(title = "Frecuencia de Síntomas",
x = "Síntoma",
y = "Frecuencia",
fill = "Síntoma") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_viridis(discrete = TRUE)
#PERCENTILES
linelist %>%
summarise(age_percentiles = quantile(age_years, na.rm =TRUE))
linelist %>%
summarise(
age_percentiles = quantile(age_years, probs = c(.05, 0.5, 0.75, 0.980) , na.rm =TRUE))
linelist %>%
group_by(hospital) %>%
summarise(
p05 = quantile(age_years, probs = 0.05, na.rm = TRUE),
p50 = quantile(age_years, probs = 0.50, na.rm = TRUE),
p75 = quantile(age_years, probs = 0.75, na.rm = TRUE),
p98 = quantile(age_years, probs = 0.98, na.rm = TRUE)
)
linelist %>%
rstatix::get_summary_stats(age, type = "quantile")
linelist_agg <-  linelist %>%
drop_na(gender, outcome) %>%
count(outcome, gender)
linelist_agg
linelist_agg %>%
group_by (outcome) %>%
summarise(
total_cases = sum(n, na.rm=T),
male_cases = sum(n[gender == "m"], na.rm=T),
female_cases = sum(n[gender == "f"], na.rm=T)
)
linelist %>%
group_by(outcome) %>%
summarise(round(across(.cols = c(age_years, temp, wt_kg, ht_cm),
.fns = mean,
na.rm=T), digits = 2))
linelist %>%
group_by(outcome) %>%
summarise(round(across(.cols = c(age_years, temp, wt_kg, ht_cm),
.fns = list("mean" = mean, "sd" = sd),
na.rm=T                   ), digits = 3))
linelist %>%
group_by(outcome) %>%
summarise(round(across(
.cols = where(is.numeric),
.fns = mean,
na.rm =T ), digits = 2))
age_by_outcome <- linelist %>%
group_by(outcome) %>%
count(age_cat) %>%
mutate(percent = scales::percent(n/sum(n)))
age_by_outcome
age_by_outcome %>%
select(-percent) %>%
pivot_wider(names_from = age_cat, values_from = n)
linelist %>%
group_by(gender) %>%
summarise(
know_outcome = sum(!is.na(outcome)),
n_death = sum(outcome == "Death", na.rm =T),
n_recover = sum(outcome == "Recover", na.rm=T),
) %>%
adorn_totals() %>%
adorn_percentages("col") %>%
adorn_pct_formatting() %>%
adorn_ns(position= "front")
by_hospital <- linelist %>%
filter(!is.na(outcome) & hospital != "Missing") %>%
group_by(hospital, outcome) %>%
summarise(
N= n(),
ct_value = median(ct_blood, na.rm=T)
)
by_hospital
totals <-  linelist %>%
filter(!is.na(outcome) & hospital != "Missing") %>%
group_by(outcome) %>%
summarise(
N= n(),
ct_value = median(ct_blood, na.rm=T))
totals
table_long <-  bind_rows(by_hospital, totals) %>%
mutate(hospital = replace_na(hospital, "Total"))
table_long
table_long %>%
mutate(hospital = replace_na(hospital, "Total")) %>%
pivot_wider(
values_from = c(ct_value, N),
names_from = outcome) %>%
mutate(
N-Know = N_Death + N_Recover,
table_long %>%
mutate(hospital = replace_na(hospital, "Total")) %>%
pivot_wider(
values_from = c(ct_value, N),
names_from = outcome) %>%
mutate(
N-Know = N_Death + N_Recover,
table_long %>%
mutate(hospital = replace_na(hospital, "Total")) %>%
pivot_wider(
values_from = c(ct_value, N),
names_from = outcome) %>%
mutate(
N_Know = N_Death + N_Recover,
Pct_Death = scales :: percent(N_Death / N_Known, 0.1),
Pct_Recover = scales::percent(N_Recover / N_Known, 0.1)) %>%
select(
hospital, N_Known,
N_REcover, Pct_Recover, ct_value_Recover,
N_Death, Pct_Death, ct_value_Death) %>%
arrange (N_Known)
table_long %>%
mutate(hospital = replace_na(hospital, "Total")) %>%
pivot_wider(
values_from = c(ct_value, N),
names_from = outcome
) %>%
mutate(
N_Known = N_Death + N_Recover,
Pct_Death = percent(N_Death / N_Known, 0.1),
Pct_Recover = percent(N_Recover / N_Known, 0.1)
) %>%
select(
hospital, N_Known,
N_Recover, Pct_Recover, ct_value_Recover,
N_Death, Pct_Death, ct_value_Death
) %>%
arrange(N_Known)
table(linelist$outcome, useNA = "always")
age_by_outcome <- table(linelist$age_caat, linelist$outcome, useNA = "always")
age_by_outcome <- table(linelist$age_cat, linelist$outcome, useNA = "always")
age_by_outcome
prop.table(age_by_outcome, 1) %>% round(2)
addmargins(age_by_outcome)
table( fct_explicit_na(linelist$age_cat), fct_explicit_na(linelist$outcome)) %>%
addmargins() %>%
as.data.frame.matrix() %>%
tibble::rownames_to_column(var = "Age Category") %>%
flextable::flextable()
